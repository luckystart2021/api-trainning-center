// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Testsuite is an object representing the database table.
type Testsuite struct {
	ID     int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name   string `boil:"name" json:"name" toml:"name" yaml:"name"`
	RankID int    `boil:"rank_id" json:"rank_id" toml:"rank_id" yaml:"rank_id"`

	R *testsuiteR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testsuiteL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestsuiteColumns = struct {
	ID     string
	Name   string
	RankID string
}{
	ID:     "id",
	Name:   "name",
	RankID: "rank_id",
}

// Generated where

var TestsuiteWhere = struct {
	ID     whereHelperint
	Name   whereHelperstring
	RankID whereHelperint
}{
	ID:     whereHelperint{field: "\"testsuite\".\"id\""},
	Name:   whereHelperstring{field: "\"testsuite\".\"name\""},
	RankID: whereHelperint{field: "\"testsuite\".\"rank_id\""},
}

// TestsuiteRels is where relationship names are stored.
var TestsuiteRels = struct {
	Rank               string
	TestsuiteQuestions string
}{
	Rank:               "Rank",
	TestsuiteQuestions: "TestsuiteQuestions",
}

// testsuiteR is where relationships are stored.
type testsuiteR struct {
	Rank               *RankVehicle
	TestsuiteQuestions TestsuiteQuestionSlice
}

// NewStruct creates a new relationship struct
func (*testsuiteR) NewStruct() *testsuiteR {
	return &testsuiteR{}
}

// testsuiteL is where Load methods for each relationship are stored.
type testsuiteL struct{}

var (
	testsuiteAllColumns            = []string{"id", "name", "rank_id"}
	testsuiteColumnsWithoutDefault = []string{"name", "rank_id"}
	testsuiteColumnsWithDefault    = []string{"id"}
	testsuitePrimaryKeyColumns     = []string{"id"}
)

type (
	// TestsuiteSlice is an alias for a slice of pointers to Testsuite.
	// This should generally be used opposed to []Testsuite.
	TestsuiteSlice []*Testsuite
	// TestsuiteHook is the signature for custom Testsuite hook methods
	TestsuiteHook func(context.Context, boil.ContextExecutor, *Testsuite) error

	testsuiteQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testsuiteType                 = reflect.TypeOf(&Testsuite{})
	testsuiteMapping              = queries.MakeStructMapping(testsuiteType)
	testsuitePrimaryKeyMapping, _ = queries.BindMapping(testsuiteType, testsuiteMapping, testsuitePrimaryKeyColumns)
	testsuiteInsertCacheMut       sync.RWMutex
	testsuiteInsertCache          = make(map[string]insertCache)
	testsuiteUpdateCacheMut       sync.RWMutex
	testsuiteUpdateCache          = make(map[string]updateCache)
	testsuiteUpsertCacheMut       sync.RWMutex
	testsuiteUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testsuiteBeforeInsertHooks []TestsuiteHook
var testsuiteBeforeUpdateHooks []TestsuiteHook
var testsuiteBeforeDeleteHooks []TestsuiteHook
var testsuiteBeforeUpsertHooks []TestsuiteHook

var testsuiteAfterInsertHooks []TestsuiteHook
var testsuiteAfterSelectHooks []TestsuiteHook
var testsuiteAfterUpdateHooks []TestsuiteHook
var testsuiteAfterDeleteHooks []TestsuiteHook
var testsuiteAfterUpsertHooks []TestsuiteHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Testsuite) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Testsuite) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Testsuite) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Testsuite) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Testsuite) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Testsuite) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Testsuite) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Testsuite) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Testsuite) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestsuiteHook registers your hook function for all future operations.
func AddTestsuiteHook(hookPoint boil.HookPoint, testsuiteHook TestsuiteHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		testsuiteBeforeInsertHooks = append(testsuiteBeforeInsertHooks, testsuiteHook)
	case boil.BeforeUpdateHook:
		testsuiteBeforeUpdateHooks = append(testsuiteBeforeUpdateHooks, testsuiteHook)
	case boil.BeforeDeleteHook:
		testsuiteBeforeDeleteHooks = append(testsuiteBeforeDeleteHooks, testsuiteHook)
	case boil.BeforeUpsertHook:
		testsuiteBeforeUpsertHooks = append(testsuiteBeforeUpsertHooks, testsuiteHook)
	case boil.AfterInsertHook:
		testsuiteAfterInsertHooks = append(testsuiteAfterInsertHooks, testsuiteHook)
	case boil.AfterSelectHook:
		testsuiteAfterSelectHooks = append(testsuiteAfterSelectHooks, testsuiteHook)
	case boil.AfterUpdateHook:
		testsuiteAfterUpdateHooks = append(testsuiteAfterUpdateHooks, testsuiteHook)
	case boil.AfterDeleteHook:
		testsuiteAfterDeleteHooks = append(testsuiteAfterDeleteHooks, testsuiteHook)
	case boil.AfterUpsertHook:
		testsuiteAfterUpsertHooks = append(testsuiteAfterUpsertHooks, testsuiteHook)
	}
}

// One returns a single testsuite record from the query.
func (q testsuiteQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Testsuite, error) {
	o := &Testsuite{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for testsuite")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Testsuite records from the query.
func (q testsuiteQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestsuiteSlice, error) {
	var o []*Testsuite

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Testsuite slice")
	}

	if len(testsuiteAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Testsuite records in the query.
func (q testsuiteQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count testsuite rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q testsuiteQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if testsuite exists")
	}

	return count > 0, nil
}

// Rank pointed to by the foreign key.
func (o *Testsuite) Rank(mods ...qm.QueryMod) rankVehicleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RankID),
	}

	queryMods = append(queryMods, mods...)

	query := RankVehicles(queryMods...)
	queries.SetFrom(query.Query, "\"rank_vehicle\"")

	return query
}

// TestsuiteQuestions retrieves all the testsuite_question's TestsuiteQuestions with an executor.
func (o *Testsuite) TestsuiteQuestions(mods ...qm.QueryMod) testsuiteQuestionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"testsuite_question\".\"testsuite_id\"=?", o.ID),
	)

	query := TestsuiteQuestions(queryMods...)
	queries.SetFrom(query.Query, "\"testsuite_question\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"testsuite_question\".*"})
	}

	return query
}

// LoadRank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (testsuiteL) LoadRank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestsuite interface{}, mods queries.Applicator) error {
	var slice []*Testsuite
	var object *Testsuite

	if singular {
		object = maybeTestsuite.(*Testsuite)
	} else {
		slice = *maybeTestsuite.(*[]*Testsuite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testsuiteR{}
		}
		args = append(args, object.RankID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testsuiteR{}
			}

			for _, a := range args {
				if a == obj.RankID {
					continue Outer
				}
			}

			args = append(args, obj.RankID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`rank_vehicle`), qm.WhereIn(`rank_vehicle.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RankVehicle")
	}

	var resultSlice []*RankVehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RankVehicle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rank_vehicle")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rank_vehicle")
	}

	if len(testsuiteAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Rank = foreign
		if foreign.R == nil {
			foreign.R = &rankVehicleR{}
		}
		foreign.R.RankTestsuites = append(foreign.R.RankTestsuites, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RankID == foreign.ID {
				local.R.Rank = foreign
				if foreign.R == nil {
					foreign.R = &rankVehicleR{}
				}
				foreign.R.RankTestsuites = append(foreign.R.RankTestsuites, local)
				break
			}
		}
	}

	return nil
}

// LoadTestsuiteQuestions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (testsuiteL) LoadTestsuiteQuestions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestsuite interface{}, mods queries.Applicator) error {
	var slice []*Testsuite
	var object *Testsuite

	if singular {
		object = maybeTestsuite.(*Testsuite)
	} else {
		slice = *maybeTestsuite.(*[]*Testsuite)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testsuiteR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testsuiteR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`testsuite_question`), qm.WhereIn(`testsuite_question.testsuite_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load testsuite_question")
	}

	var resultSlice []*TestsuiteQuestion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice testsuite_question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on testsuite_question")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for testsuite_question")
	}

	if len(testsuiteQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TestsuiteQuestions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &testsuiteQuestionR{}
			}
			foreign.R.Testsuite = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TestsuiteID {
				local.R.TestsuiteQuestions = append(local.R.TestsuiteQuestions, foreign)
				if foreign.R == nil {
					foreign.R = &testsuiteQuestionR{}
				}
				foreign.R.Testsuite = local
				break
			}
		}
	}

	return nil
}

// SetRank of the testsuite to the related item.
// Sets o.R.Rank to related.
// Adds o to related.R.RankTestsuites.
func (o *Testsuite) SetRank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *RankVehicle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"testsuite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"rank_id"}),
		strmangle.WhereClause("\"", "\"", 2, testsuitePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RankID = related.ID
	if o.R == nil {
		o.R = &testsuiteR{
			Rank: related,
		}
	} else {
		o.R.Rank = related
	}

	if related.R == nil {
		related.R = &rankVehicleR{
			RankTestsuites: TestsuiteSlice{o},
		}
	} else {
		related.R.RankTestsuites = append(related.R.RankTestsuites, o)
	}

	return nil
}

// AddTestsuiteQuestions adds the given related objects to the existing relationships
// of the testsuite, optionally inserting them as new records.
// Appends related to o.R.TestsuiteQuestions.
// Sets related.R.Testsuite appropriately.
func (o *Testsuite) AddTestsuiteQuestions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TestsuiteQuestion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TestsuiteID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"testsuite_question\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"testsuite_id"}),
				strmangle.WhereClause("\"", "\"", 2, testsuiteQuestionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TestsuiteID = o.ID
		}
	}

	if o.R == nil {
		o.R = &testsuiteR{
			TestsuiteQuestions: related,
		}
	} else {
		o.R.TestsuiteQuestions = append(o.R.TestsuiteQuestions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &testsuiteQuestionR{
				Testsuite: o,
			}
		} else {
			rel.R.Testsuite = o
		}
	}
	return nil
}

// Testsuites retrieves all the records using an executor.
func Testsuites(mods ...qm.QueryMod) testsuiteQuery {
	mods = append(mods, qm.From("\"testsuite\""))
	return testsuiteQuery{NewQuery(mods...)}
}

// FindTestsuite retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTestsuite(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Testsuite, error) {
	testsuiteObj := &Testsuite{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"testsuite\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, testsuiteObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from testsuite")
	}

	return testsuiteObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Testsuite) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no testsuite provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testsuiteColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testsuiteInsertCacheMut.RLock()
	cache, cached := testsuiteInsertCache[key]
	testsuiteInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testsuiteAllColumns,
			testsuiteColumnsWithDefault,
			testsuiteColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testsuiteType, testsuiteMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testsuiteType, testsuiteMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"testsuite\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"testsuite\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into testsuite")
	}

	if !cached {
		testsuiteInsertCacheMut.Lock()
		testsuiteInsertCache[key] = cache
		testsuiteInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Testsuite.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Testsuite) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testsuiteUpdateCacheMut.RLock()
	cache, cached := testsuiteUpdateCache[key]
	testsuiteUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testsuiteAllColumns,
			testsuitePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update testsuite, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"testsuite\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testsuitePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testsuiteType, testsuiteMapping, append(wl, testsuitePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update testsuite row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for testsuite")
	}

	if !cached {
		testsuiteUpdateCacheMut.Lock()
		testsuiteUpdateCache[key] = cache
		testsuiteUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q testsuiteQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for testsuite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for testsuite")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestsuiteSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"testsuite\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testsuitePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in testsuite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all testsuite")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Testsuite) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no testsuite provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testsuiteColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testsuiteUpsertCacheMut.RLock()
	cache, cached := testsuiteUpsertCache[key]
	testsuiteUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			testsuiteAllColumns,
			testsuiteColumnsWithDefault,
			testsuiteColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			testsuiteAllColumns,
			testsuitePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert testsuite, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(testsuitePrimaryKeyColumns))
			copy(conflict, testsuitePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"testsuite\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(testsuiteType, testsuiteMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testsuiteType, testsuiteMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert testsuite")
	}

	if !cached {
		testsuiteUpsertCacheMut.Lock()
		testsuiteUpsertCache[key] = cache
		testsuiteUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Testsuite record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Testsuite) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Testsuite provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testsuitePrimaryKeyMapping)
	sql := "DELETE FROM \"testsuite\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from testsuite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for testsuite")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q testsuiteQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no testsuiteQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testsuite")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for testsuite")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestsuiteSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testsuiteBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"testsuite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testsuitePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testsuite slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for testsuite")
	}

	if len(testsuiteAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Testsuite) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTestsuite(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestsuiteSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestsuiteSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuitePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"testsuite\".* FROM \"testsuite\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testsuitePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TestsuiteSlice")
	}

	*o = slice

	return nil
}

// TestsuiteExists checks if the Testsuite row exists.
func TestsuiteExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"testsuite\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if testsuite exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ScheduleContent is an object representing the database table.
type ScheduleContent struct {
	ID                 int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Weekday            string      `boil:"weekday" json:"weekday" toml:"weekday" yaml:"weekday"`
	Date               string      `boil:"date" json:"date" toml:"date" yaml:"date"`
	ScheduleID         null.Int64  `boil:"schedule_id" json:"schedule_id,omitempty" toml:"schedule_id" yaml:"schedule_id,omitempty"`
	CreatedAt          time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	SubjectName        null.String `boil:"subject_name" json:"subject_name,omitempty" toml:"subject_name" yaml:"subject_name,omitempty"`
	HourStudent        null.String `boil:"hour_student" json:"hour_student,omitempty" toml:"hour_student" yaml:"hour_student,omitempty"`
	KMStudent          null.String `boil:"km_student" json:"km_student,omitempty" toml:"km_student" yaml:"km_student,omitempty"`
	HourPerDateVehicle null.Int    `boil:"hour_per_date_vehicle" json:"hour_per_date_vehicle,omitempty" toml:"hour_per_date_vehicle" yaml:"hour_per_date_vehicle,omitempty"`
	KMDateVehicle      null.Int    `boil:"km_date_vehicle" json:"km_date_vehicle,omitempty" toml:"km_date_vehicle" yaml:"km_date_vehicle,omitempty"`

	R *scheduleContentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduleContentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduleContentColumns = struct {
	ID                 string
	Weekday            string
	Date               string
	ScheduleID         string
	CreatedAt          string
	SubjectName        string
	HourStudent        string
	KMStudent          string
	HourPerDateVehicle string
	KMDateVehicle      string
}{
	ID:                 "id",
	Weekday:            "weekday",
	Date:               "date",
	ScheduleID:         "schedule_id",
	CreatedAt:          "created_at",
	SubjectName:        "subject_name",
	HourStudent:        "hour_student",
	KMStudent:          "km_student",
	HourPerDateVehicle: "hour_per_date_vehicle",
	KMDateVehicle:      "km_date_vehicle",
}

// Generated where

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ScheduleContentWhere = struct {
	ID                 whereHelperint64
	Weekday            whereHelperstring
	Date               whereHelperstring
	ScheduleID         whereHelpernull_Int64
	CreatedAt          whereHelpertime_Time
	SubjectName        whereHelpernull_String
	HourStudent        whereHelpernull_String
	KMStudent          whereHelpernull_String
	HourPerDateVehicle whereHelpernull_Int
	KMDateVehicle      whereHelpernull_Int
}{
	ID:                 whereHelperint64{field: "\"schedule_content\".\"id\""},
	Weekday:            whereHelperstring{field: "\"schedule_content\".\"weekday\""},
	Date:               whereHelperstring{field: "\"schedule_content\".\"date\""},
	ScheduleID:         whereHelpernull_Int64{field: "\"schedule_content\".\"schedule_id\""},
	CreatedAt:          whereHelpertime_Time{field: "\"schedule_content\".\"created_at\""},
	SubjectName:        whereHelpernull_String{field: "\"schedule_content\".\"subject_name\""},
	HourStudent:        whereHelpernull_String{field: "\"schedule_content\".\"hour_student\""},
	KMStudent:          whereHelpernull_String{field: "\"schedule_content\".\"km_student\""},
	HourPerDateVehicle: whereHelpernull_Int{field: "\"schedule_content\".\"hour_per_date_vehicle\""},
	KMDateVehicle:      whereHelpernull_Int{field: "\"schedule_content\".\"km_date_vehicle\""},
}

// ScheduleContentRels is where relationship names are stored.
var ScheduleContentRels = struct {
	Schedule                        string
	ScheduleSubjectScheduleSubjects string
}{
	Schedule:                        "Schedule",
	ScheduleSubjectScheduleSubjects: "ScheduleSubjectScheduleSubjects",
}

// scheduleContentR is where relationships are stored.
type scheduleContentR struct {
	Schedule                        *Schedule
	ScheduleSubjectScheduleSubjects ScheduleSubjectSlice
}

// NewStruct creates a new relationship struct
func (*scheduleContentR) NewStruct() *scheduleContentR {
	return &scheduleContentR{}
}

// scheduleContentL is where Load methods for each relationship are stored.
type scheduleContentL struct{}

var (
	scheduleContentAllColumns            = []string{"id", "weekday", "date", "schedule_id", "created_at", "subject_name", "hour_student", "km_student", "hour_per_date_vehicle", "km_date_vehicle"}
	scheduleContentColumnsWithoutDefault = []string{"weekday", "date", "schedule_id", "subject_name", "hour_student", "km_student", "hour_per_date_vehicle", "km_date_vehicle"}
	scheduleContentColumnsWithDefault    = []string{"id", "created_at"}
	scheduleContentPrimaryKeyColumns     = []string{"id"}
)

type (
	// ScheduleContentSlice is an alias for a slice of pointers to ScheduleContent.
	// This should generally be used opposed to []ScheduleContent.
	ScheduleContentSlice []*ScheduleContent
	// ScheduleContentHook is the signature for custom ScheduleContent hook methods
	ScheduleContentHook func(context.Context, boil.ContextExecutor, *ScheduleContent) error

	scheduleContentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduleContentType                 = reflect.TypeOf(&ScheduleContent{})
	scheduleContentMapping              = queries.MakeStructMapping(scheduleContentType)
	scheduleContentPrimaryKeyMapping, _ = queries.BindMapping(scheduleContentType, scheduleContentMapping, scheduleContentPrimaryKeyColumns)
	scheduleContentInsertCacheMut       sync.RWMutex
	scheduleContentInsertCache          = make(map[string]insertCache)
	scheduleContentUpdateCacheMut       sync.RWMutex
	scheduleContentUpdateCache          = make(map[string]updateCache)
	scheduleContentUpsertCacheMut       sync.RWMutex
	scheduleContentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scheduleContentBeforeInsertHooks []ScheduleContentHook
var scheduleContentBeforeUpdateHooks []ScheduleContentHook
var scheduleContentBeforeDeleteHooks []ScheduleContentHook
var scheduleContentBeforeUpsertHooks []ScheduleContentHook

var scheduleContentAfterInsertHooks []ScheduleContentHook
var scheduleContentAfterSelectHooks []ScheduleContentHook
var scheduleContentAfterUpdateHooks []ScheduleContentHook
var scheduleContentAfterDeleteHooks []ScheduleContentHook
var scheduleContentAfterUpsertHooks []ScheduleContentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ScheduleContent) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ScheduleContent) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ScheduleContent) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ScheduleContent) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ScheduleContent) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ScheduleContent) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ScheduleContent) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ScheduleContent) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ScheduleContent) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleContentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScheduleContentHook registers your hook function for all future operations.
func AddScheduleContentHook(hookPoint boil.HookPoint, scheduleContentHook ScheduleContentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		scheduleContentBeforeInsertHooks = append(scheduleContentBeforeInsertHooks, scheduleContentHook)
	case boil.BeforeUpdateHook:
		scheduleContentBeforeUpdateHooks = append(scheduleContentBeforeUpdateHooks, scheduleContentHook)
	case boil.BeforeDeleteHook:
		scheduleContentBeforeDeleteHooks = append(scheduleContentBeforeDeleteHooks, scheduleContentHook)
	case boil.BeforeUpsertHook:
		scheduleContentBeforeUpsertHooks = append(scheduleContentBeforeUpsertHooks, scheduleContentHook)
	case boil.AfterInsertHook:
		scheduleContentAfterInsertHooks = append(scheduleContentAfterInsertHooks, scheduleContentHook)
	case boil.AfterSelectHook:
		scheduleContentAfterSelectHooks = append(scheduleContentAfterSelectHooks, scheduleContentHook)
	case boil.AfterUpdateHook:
		scheduleContentAfterUpdateHooks = append(scheduleContentAfterUpdateHooks, scheduleContentHook)
	case boil.AfterDeleteHook:
		scheduleContentAfterDeleteHooks = append(scheduleContentAfterDeleteHooks, scheduleContentHook)
	case boil.AfterUpsertHook:
		scheduleContentAfterUpsertHooks = append(scheduleContentAfterUpsertHooks, scheduleContentHook)
	}
}

// One returns a single scheduleContent record from the query.
func (q scheduleContentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ScheduleContent, error) {
	o := &ScheduleContent{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schedule_content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ScheduleContent records from the query.
func (q scheduleContentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScheduleContentSlice, error) {
	var o []*ScheduleContent

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ScheduleContent slice")
	}

	if len(scheduleContentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ScheduleContent records in the query.
func (q scheduleContentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schedule_content rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scheduleContentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schedule_content exists")
	}

	return count > 0, nil
}

// Schedule pointed to by the foreign key.
func (o *ScheduleContent) Schedule(mods ...qm.QueryMod) scheduleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ScheduleID),
	}

	queryMods = append(queryMods, mods...)

	query := Schedules(queryMods...)
	queries.SetFrom(query.Query, "\"schedule\"")

	return query
}

// ScheduleSubjectScheduleSubjects retrieves all the schedule_subject's ScheduleSubjects with an executor via schedule__subject_id column.
func (o *ScheduleContent) ScheduleSubjectScheduleSubjects(mods ...qm.QueryMod) scheduleSubjectQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"schedule_subject\".\"schedule__subject_id\"=?", o.ID),
	)

	query := ScheduleSubjects(queryMods...)
	queries.SetFrom(query.Query, "\"schedule_subject\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"schedule_subject\".*"})
	}

	return query
}

// LoadSchedule allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (scheduleContentL) LoadSchedule(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduleContent interface{}, mods queries.Applicator) error {
	var slice []*ScheduleContent
	var object *ScheduleContent

	if singular {
		object = maybeScheduleContent.(*ScheduleContent)
	} else {
		slice = *maybeScheduleContent.(*[]*ScheduleContent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleContentR{}
		}
		if !queries.IsNil(object.ScheduleID) {
			args = append(args, object.ScheduleID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleContentR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ScheduleID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ScheduleID) {
				args = append(args, obj.ScheduleID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`schedule`), qm.WhereIn(`schedule.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Schedule")
	}

	var resultSlice []*Schedule
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Schedule")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for schedule")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedule")
	}

	if len(scheduleContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Schedule = foreign
		if foreign.R == nil {
			foreign.R = &scheduleR{}
		}
		foreign.R.ScheduleContents = append(foreign.R.ScheduleContents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ScheduleID, foreign.ID) {
				local.R.Schedule = foreign
				if foreign.R == nil {
					foreign.R = &scheduleR{}
				}
				foreign.R.ScheduleContents = append(foreign.R.ScheduleContents, local)
				break
			}
		}
	}

	return nil
}

// LoadScheduleSubjectScheduleSubjects allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (scheduleContentL) LoadScheduleSubjectScheduleSubjects(ctx context.Context, e boil.ContextExecutor, singular bool, maybeScheduleContent interface{}, mods queries.Applicator) error {
	var slice []*ScheduleContent
	var object *ScheduleContent

	if singular {
		object = maybeScheduleContent.(*ScheduleContent)
	} else {
		slice = *maybeScheduleContent.(*[]*ScheduleContent)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleContentR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleContentR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`schedule_subject`), qm.WhereIn(`schedule_subject.schedule__subject_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load schedule_subject")
	}

	var resultSlice []*ScheduleSubject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice schedule_subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on schedule_subject")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedule_subject")
	}

	if len(scheduleSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScheduleSubjectScheduleSubjects = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scheduleSubjectR{}
			}
			foreign.R.ScheduleSubject = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ScheduleSubjectID {
				local.R.ScheduleSubjectScheduleSubjects = append(local.R.ScheduleSubjectScheduleSubjects, foreign)
				if foreign.R == nil {
					foreign.R = &scheduleSubjectR{}
				}
				foreign.R.ScheduleSubject = local
				break
			}
		}
	}

	return nil
}

// SetSchedule of the scheduleContent to the related item.
// Sets o.R.Schedule to related.
// Adds o to related.R.ScheduleContents.
func (o *ScheduleContent) SetSchedule(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Schedule) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"schedule_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"schedule_id"}),
		strmangle.WhereClause("\"", "\"", 2, scheduleContentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ScheduleID, related.ID)
	if o.R == nil {
		o.R = &scheduleContentR{
			Schedule: related,
		}
	} else {
		o.R.Schedule = related
	}

	if related.R == nil {
		related.R = &scheduleR{
			ScheduleContents: ScheduleContentSlice{o},
		}
	} else {
		related.R.ScheduleContents = append(related.R.ScheduleContents, o)
	}

	return nil
}

// RemoveSchedule relationship.
// Sets o.R.Schedule to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ScheduleContent) RemoveSchedule(ctx context.Context, exec boil.ContextExecutor, related *Schedule) error {
	var err error

	queries.SetScanner(&o.ScheduleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("schedule_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Schedule = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ScheduleContents {
		if queries.Equal(o.ScheduleID, ri.ScheduleID) {
			continue
		}

		ln := len(related.R.ScheduleContents)
		if ln > 1 && i < ln-1 {
			related.R.ScheduleContents[i] = related.R.ScheduleContents[ln-1]
		}
		related.R.ScheduleContents = related.R.ScheduleContents[:ln-1]
		break
	}
	return nil
}

// AddScheduleSubjectScheduleSubjects adds the given related objects to the existing relationships
// of the schedule_content, optionally inserting them as new records.
// Appends related to o.R.ScheduleSubjectScheduleSubjects.
// Sets related.R.ScheduleSubject appropriately.
func (o *ScheduleContent) AddScheduleSubjectScheduleSubjects(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ScheduleSubject) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ScheduleSubjectID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"schedule_subject\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"schedule__subject_id"}),
				strmangle.WhereClause("\"", "\"", 2, scheduleSubjectPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ScheduleSubjectID = o.ID
		}
	}

	if o.R == nil {
		o.R = &scheduleContentR{
			ScheduleSubjectScheduleSubjects: related,
		}
	} else {
		o.R.ScheduleSubjectScheduleSubjects = append(o.R.ScheduleSubjectScheduleSubjects, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduleSubjectR{
				ScheduleSubject: o,
			}
		} else {
			rel.R.ScheduleSubject = o
		}
	}
	return nil
}

// ScheduleContents retrieves all the records using an executor.
func ScheduleContents(mods ...qm.QueryMod) scheduleContentQuery {
	mods = append(mods, qm.From("\"schedule_content\""))
	return scheduleContentQuery{NewQuery(mods...)}
}

// FindScheduleContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindScheduleContent(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ScheduleContent, error) {
	scheduleContentObj := &ScheduleContent{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schedule_content\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scheduleContentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schedule_content")
	}

	return scheduleContentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ScheduleContent) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule_content provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleContentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scheduleContentInsertCacheMut.RLock()
	cache, cached := scheduleContentInsertCache[key]
	scheduleContentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scheduleContentAllColumns,
			scheduleContentColumnsWithDefault,
			scheduleContentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scheduleContentType, scheduleContentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduleContentType, scheduleContentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schedule_content\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schedule_content\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schedule_content")
	}

	if !cached {
		scheduleContentInsertCacheMut.Lock()
		scheduleContentInsertCache[key] = cache
		scheduleContentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ScheduleContent.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ScheduleContent) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scheduleContentUpdateCacheMut.RLock()
	cache, cached := scheduleContentUpdateCache[key]
	scheduleContentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scheduleContentAllColumns,
			scheduleContentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update schedule_content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schedule_content\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, scheduleContentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduleContentType, scheduleContentMapping, append(wl, scheduleContentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update schedule_content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for schedule_content")
	}

	if !cached {
		scheduleContentUpdateCacheMut.Lock()
		scheduleContentUpdateCache[key] = cache
		scheduleContentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scheduleContentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for schedule_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for schedule_content")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduleContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schedule_content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, scheduleContentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in scheduleContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all scheduleContent")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ScheduleContent) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule_content provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleContentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduleContentUpsertCacheMut.RLock()
	cache, cached := scheduleContentUpsertCache[key]
	scheduleContentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scheduleContentAllColumns,
			scheduleContentColumnsWithDefault,
			scheduleContentColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scheduleContentAllColumns,
			scheduleContentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert schedule_content, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(scheduleContentPrimaryKeyColumns))
			copy(conflict, scheduleContentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"schedule_content\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scheduleContentType, scheduleContentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduleContentType, scheduleContentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert schedule_content")
	}

	if !cached {
		scheduleContentUpsertCacheMut.Lock()
		scheduleContentUpsertCache[key] = cache
		scheduleContentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ScheduleContent record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ScheduleContent) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ScheduleContent provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), scheduleContentPrimaryKeyMapping)
	sql := "DELETE FROM \"schedule_content\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from schedule_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for schedule_content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scheduleContentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no scheduleContentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedule_content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule_content")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduleContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(scheduleContentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schedule_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduleContentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from scheduleContent slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule_content")
	}

	if len(scheduleContentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ScheduleContent) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindScheduleContent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScheduleContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), scheduleContentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schedule_content\".* FROM \"schedule_content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, scheduleContentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScheduleContentSlice")
	}

	*o = slice

	return nil
}

// ScheduleContentExists checks if the ScheduleContent row exists.
func ScheduleContentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schedule_content\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schedule_content exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// DetailSchedule is an object representing the database table.
type DetailSchedule struct {
	ID   int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name null.String `boil:"name" json:"name,omitempty" toml:"name" yaml:"name,omitempty"`
	LT   null.Int    `boil:"lt" json:"lt,omitempty" toml:"lt" yaml:"lt,omitempty"`
	TH   null.Int    `boil:"th" json:"th,omitempty" toml:"th" yaml:"th,omitempty"`

	R *detailScheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L detailScheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DetailScheduleColumns = struct {
	ID   string
	Name string
	LT   string
	TH   string
}{
	ID:   "id",
	Name: "name",
	LT:   "lt",
	TH:   "th",
}

// Generated where

var DetailScheduleWhere = struct {
	ID   whereHelperint64
	Name whereHelpernull_String
	LT   whereHelpernull_Int
	TH   whereHelpernull_Int
}{
	ID:   whereHelperint64{field: "\"detail_schedule\".\"id\""},
	Name: whereHelpernull_String{field: "\"detail_schedule\".\"name\""},
	LT:   whereHelpernull_Int{field: "\"detail_schedule\".\"lt\""},
	TH:   whereHelpernull_Int{field: "\"detail_schedule\".\"th\""},
}

// DetailScheduleRels is where relationship names are stored.
var DetailScheduleRels = struct {
}{}

// detailScheduleR is where relationships are stored.
type detailScheduleR struct {
}

// NewStruct creates a new relationship struct
func (*detailScheduleR) NewStruct() *detailScheduleR {
	return &detailScheduleR{}
}

// detailScheduleL is where Load methods for each relationship are stored.
type detailScheduleL struct{}

var (
	detailScheduleAllColumns            = []string{"id", "name", "lt", "th"}
	detailScheduleColumnsWithoutDefault = []string{"name", "lt", "th"}
	detailScheduleColumnsWithDefault    = []string{"id"}
	detailSchedulePrimaryKeyColumns     = []string{"id"}
)

type (
	// DetailScheduleSlice is an alias for a slice of pointers to DetailSchedule.
	// This should generally be used opposed to []DetailSchedule.
	DetailScheduleSlice []*DetailSchedule
	// DetailScheduleHook is the signature for custom DetailSchedule hook methods
	DetailScheduleHook func(context.Context, boil.ContextExecutor, *DetailSchedule) error

	detailScheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	detailScheduleType                 = reflect.TypeOf(&DetailSchedule{})
	detailScheduleMapping              = queries.MakeStructMapping(detailScheduleType)
	detailSchedulePrimaryKeyMapping, _ = queries.BindMapping(detailScheduleType, detailScheduleMapping, detailSchedulePrimaryKeyColumns)
	detailScheduleInsertCacheMut       sync.RWMutex
	detailScheduleInsertCache          = make(map[string]insertCache)
	detailScheduleUpdateCacheMut       sync.RWMutex
	detailScheduleUpdateCache          = make(map[string]updateCache)
	detailScheduleUpsertCacheMut       sync.RWMutex
	detailScheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var detailScheduleBeforeInsertHooks []DetailScheduleHook
var detailScheduleBeforeUpdateHooks []DetailScheduleHook
var detailScheduleBeforeDeleteHooks []DetailScheduleHook
var detailScheduleBeforeUpsertHooks []DetailScheduleHook

var detailScheduleAfterInsertHooks []DetailScheduleHook
var detailScheduleAfterSelectHooks []DetailScheduleHook
var detailScheduleAfterUpdateHooks []DetailScheduleHook
var detailScheduleAfterDeleteHooks []DetailScheduleHook
var detailScheduleAfterUpsertHooks []DetailScheduleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DetailSchedule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DetailSchedule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DetailSchedule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DetailSchedule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DetailSchedule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DetailSchedule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DetailSchedule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DetailSchedule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DetailSchedule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range detailScheduleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDetailScheduleHook registers your hook function for all future operations.
func AddDetailScheduleHook(hookPoint boil.HookPoint, detailScheduleHook DetailScheduleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		detailScheduleBeforeInsertHooks = append(detailScheduleBeforeInsertHooks, detailScheduleHook)
	case boil.BeforeUpdateHook:
		detailScheduleBeforeUpdateHooks = append(detailScheduleBeforeUpdateHooks, detailScheduleHook)
	case boil.BeforeDeleteHook:
		detailScheduleBeforeDeleteHooks = append(detailScheduleBeforeDeleteHooks, detailScheduleHook)
	case boil.BeforeUpsertHook:
		detailScheduleBeforeUpsertHooks = append(detailScheduleBeforeUpsertHooks, detailScheduleHook)
	case boil.AfterInsertHook:
		detailScheduleAfterInsertHooks = append(detailScheduleAfterInsertHooks, detailScheduleHook)
	case boil.AfterSelectHook:
		detailScheduleAfterSelectHooks = append(detailScheduleAfterSelectHooks, detailScheduleHook)
	case boil.AfterUpdateHook:
		detailScheduleAfterUpdateHooks = append(detailScheduleAfterUpdateHooks, detailScheduleHook)
	case boil.AfterDeleteHook:
		detailScheduleAfterDeleteHooks = append(detailScheduleAfterDeleteHooks, detailScheduleHook)
	case boil.AfterUpsertHook:
		detailScheduleAfterUpsertHooks = append(detailScheduleAfterUpsertHooks, detailScheduleHook)
	}
}

// One returns a single detailSchedule record from the query.
func (q detailScheduleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DetailSchedule, error) {
	o := &DetailSchedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for detail_schedule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DetailSchedule records from the query.
func (q detailScheduleQuery) All(ctx context.Context, exec boil.ContextExecutor) (DetailScheduleSlice, error) {
	var o []*DetailSchedule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DetailSchedule slice")
	}

	if len(detailScheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DetailSchedule records in the query.
func (q detailScheduleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count detail_schedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q detailScheduleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if detail_schedule exists")
	}

	return count > 0, nil
}

// DetailSchedules retrieves all the records using an executor.
func DetailSchedules(mods ...qm.QueryMod) detailScheduleQuery {
	mods = append(mods, qm.From("\"detail_schedule\""))
	return detailScheduleQuery{NewQuery(mods...)}
}

// FindDetailSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDetailSchedule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*DetailSchedule, error) {
	detailScheduleObj := &DetailSchedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"detail_schedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, detailScheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from detail_schedule")
	}

	return detailScheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DetailSchedule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no detail_schedule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(detailScheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	detailScheduleInsertCacheMut.RLock()
	cache, cached := detailScheduleInsertCache[key]
	detailScheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			detailScheduleAllColumns,
			detailScheduleColumnsWithDefault,
			detailScheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(detailScheduleType, detailScheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(detailScheduleType, detailScheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"detail_schedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"detail_schedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into detail_schedule")
	}

	if !cached {
		detailScheduleInsertCacheMut.Lock()
		detailScheduleInsertCache[key] = cache
		detailScheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DetailSchedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DetailSchedule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	detailScheduleUpdateCacheMut.RLock()
	cache, cached := detailScheduleUpdateCache[key]
	detailScheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			detailScheduleAllColumns,
			detailSchedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update detail_schedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"detail_schedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, detailSchedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(detailScheduleType, detailScheduleMapping, append(wl, detailSchedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update detail_schedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for detail_schedule")
	}

	if !cached {
		detailScheduleUpdateCacheMut.Lock()
		detailScheduleUpdateCache[key] = cache
		detailScheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q detailScheduleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for detail_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for detail_schedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DetailScheduleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detailSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"detail_schedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, detailSchedulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in detailSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all detailSchedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DetailSchedule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no detail_schedule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(detailScheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	detailScheduleUpsertCacheMut.RLock()
	cache, cached := detailScheduleUpsertCache[key]
	detailScheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			detailScheduleAllColumns,
			detailScheduleColumnsWithDefault,
			detailScheduleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			detailScheduleAllColumns,
			detailSchedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert detail_schedule, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(detailSchedulePrimaryKeyColumns))
			copy(conflict, detailSchedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"detail_schedule\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(detailScheduleType, detailScheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(detailScheduleType, detailScheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert detail_schedule")
	}

	if !cached {
		detailScheduleUpsertCacheMut.Lock()
		detailScheduleUpsertCache[key] = cache
		detailScheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DetailSchedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DetailSchedule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DetailSchedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), detailSchedulePrimaryKeyMapping)
	sql := "DELETE FROM \"detail_schedule\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from detail_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for detail_schedule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q detailScheduleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no detailScheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from detail_schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for detail_schedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DetailScheduleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(detailScheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detailSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"detail_schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, detailSchedulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from detailSchedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for detail_schedule")
	}

	if len(detailScheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DetailSchedule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDetailSchedule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DetailScheduleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DetailScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), detailSchedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"detail_schedule\".* FROM \"detail_schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, detailSchedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DetailScheduleSlice")
	}

	*o = slice

	return nil
}

// DetailScheduleExists checks if the DetailSchedule row exists.
func DetailScheduleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"detail_schedule\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if detail_schedule exists")
	}

	return exists, nil
}

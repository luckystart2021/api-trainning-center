// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ChildSubject is an object representing the database table.
type ChildSubject struct {
	ID        int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	LT        null.Int    `boil:"lt" json:"lt,omitempty" toml:"lt" yaml:"lt,omitempty"`
	TH        null.Int    `boil:"th" json:"th,omitempty" toml:"th" yaml:"th,omitempty"`
	CreatedBy string      `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	CreatedAt time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedBy string      `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	UpdatedAt time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	SubjectID int         `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	Group     null.String `boil:"group" json:"group,omitempty" toml:"group" yaml:"group,omitempty"`

	R *childSubjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L childSubjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ChildSubjectColumns = struct {
	ID        string
	Name      string
	LT        string
	TH        string
	CreatedBy string
	CreatedAt string
	UpdatedBy string
	UpdatedAt string
	SubjectID string
	Group     string
}{
	ID:        "id",
	Name:      "name",
	LT:        "lt",
	TH:        "th",
	CreatedBy: "created_by",
	CreatedAt: "created_at",
	UpdatedBy: "updated_by",
	UpdatedAt: "updated_at",
	SubjectID: "subject_id",
	Group:     "group",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ChildSubjectWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	LT        whereHelpernull_Int
	TH        whereHelpernull_Int
	CreatedBy whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedBy whereHelperstring
	UpdatedAt whereHelpertime_Time
	SubjectID whereHelperint
	Group     whereHelpernull_String
}{
	ID:        whereHelperint{field: "\"child_subject\".\"id\""},
	Name:      whereHelperstring{field: "\"child_subject\".\"name\""},
	LT:        whereHelpernull_Int{field: "\"child_subject\".\"lt\""},
	TH:        whereHelpernull_Int{field: "\"child_subject\".\"th\""},
	CreatedBy: whereHelperstring{field: "\"child_subject\".\"created_by\""},
	CreatedAt: whereHelpertime_Time{field: "\"child_subject\".\"created_at\""},
	UpdatedBy: whereHelperstring{field: "\"child_subject\".\"updated_by\""},
	UpdatedAt: whereHelpertime_Time{field: "\"child_subject\".\"updated_at\""},
	SubjectID: whereHelperint{field: "\"child_subject\".\"subject_id\""},
	Group:     whereHelpernull_String{field: "\"child_subject\".\"group\""},
}

// ChildSubjectRels is where relationship names are stored.
var ChildSubjectRels = struct {
	Subject string
}{
	Subject: "Subject",
}

// childSubjectR is where relationships are stored.
type childSubjectR struct {
	Subject *Subject
}

// NewStruct creates a new relationship struct
func (*childSubjectR) NewStruct() *childSubjectR {
	return &childSubjectR{}
}

// childSubjectL is where Load methods for each relationship are stored.
type childSubjectL struct{}

var (
	childSubjectAllColumns            = []string{"id", "name", "lt", "th", "created_by", "created_at", "updated_by", "updated_at", "subject_id", "group"}
	childSubjectColumnsWithoutDefault = []string{"name", "lt", "th", "created_by", "updated_by", "subject_id", "group"}
	childSubjectColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	childSubjectPrimaryKeyColumns     = []string{"id"}
)

type (
	// ChildSubjectSlice is an alias for a slice of pointers to ChildSubject.
	// This should generally be used opposed to []ChildSubject.
	ChildSubjectSlice []*ChildSubject
	// ChildSubjectHook is the signature for custom ChildSubject hook methods
	ChildSubjectHook func(context.Context, boil.ContextExecutor, *ChildSubject) error

	childSubjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	childSubjectType                 = reflect.TypeOf(&ChildSubject{})
	childSubjectMapping              = queries.MakeStructMapping(childSubjectType)
	childSubjectPrimaryKeyMapping, _ = queries.BindMapping(childSubjectType, childSubjectMapping, childSubjectPrimaryKeyColumns)
	childSubjectInsertCacheMut       sync.RWMutex
	childSubjectInsertCache          = make(map[string]insertCache)
	childSubjectUpdateCacheMut       sync.RWMutex
	childSubjectUpdateCache          = make(map[string]updateCache)
	childSubjectUpsertCacheMut       sync.RWMutex
	childSubjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var childSubjectBeforeInsertHooks []ChildSubjectHook
var childSubjectBeforeUpdateHooks []ChildSubjectHook
var childSubjectBeforeDeleteHooks []ChildSubjectHook
var childSubjectBeforeUpsertHooks []ChildSubjectHook

var childSubjectAfterInsertHooks []ChildSubjectHook
var childSubjectAfterSelectHooks []ChildSubjectHook
var childSubjectAfterUpdateHooks []ChildSubjectHook
var childSubjectAfterDeleteHooks []ChildSubjectHook
var childSubjectAfterUpsertHooks []ChildSubjectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ChildSubject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ChildSubject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ChildSubject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ChildSubject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ChildSubject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ChildSubject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ChildSubject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ChildSubject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ChildSubject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range childSubjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddChildSubjectHook registers your hook function for all future operations.
func AddChildSubjectHook(hookPoint boil.HookPoint, childSubjectHook ChildSubjectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		childSubjectBeforeInsertHooks = append(childSubjectBeforeInsertHooks, childSubjectHook)
	case boil.BeforeUpdateHook:
		childSubjectBeforeUpdateHooks = append(childSubjectBeforeUpdateHooks, childSubjectHook)
	case boil.BeforeDeleteHook:
		childSubjectBeforeDeleteHooks = append(childSubjectBeforeDeleteHooks, childSubjectHook)
	case boil.BeforeUpsertHook:
		childSubjectBeforeUpsertHooks = append(childSubjectBeforeUpsertHooks, childSubjectHook)
	case boil.AfterInsertHook:
		childSubjectAfterInsertHooks = append(childSubjectAfterInsertHooks, childSubjectHook)
	case boil.AfterSelectHook:
		childSubjectAfterSelectHooks = append(childSubjectAfterSelectHooks, childSubjectHook)
	case boil.AfterUpdateHook:
		childSubjectAfterUpdateHooks = append(childSubjectAfterUpdateHooks, childSubjectHook)
	case boil.AfterDeleteHook:
		childSubjectAfterDeleteHooks = append(childSubjectAfterDeleteHooks, childSubjectHook)
	case boil.AfterUpsertHook:
		childSubjectAfterUpsertHooks = append(childSubjectAfterUpsertHooks, childSubjectHook)
	}
}

// One returns a single childSubject record from the query.
func (q childSubjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ChildSubject, error) {
	o := &ChildSubject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for child_subject")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ChildSubject records from the query.
func (q childSubjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (ChildSubjectSlice, error) {
	var o []*ChildSubject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ChildSubject slice")
	}

	if len(childSubjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ChildSubject records in the query.
func (q childSubjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count child_subject rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q childSubjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if child_subject exists")
	}

	return count > 0, nil
}

// Subject pointed to by the foreign key.
func (o *ChildSubject) Subject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(queryMods...)
	queries.SetFrom(query.Query, "\"subject\"")

	return query
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (childSubjectL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeChildSubject interface{}, mods queries.Applicator) error {
	var slice []*ChildSubject
	var object *ChildSubject

	if singular {
		object = maybeChildSubject.(*ChildSubject)
	} else {
		slice = *maybeChildSubject.(*[]*ChildSubject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &childSubjectR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &childSubjectR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subject`), qm.WhereIn(`subject.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subject")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subject")
	}

	if len(childSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.ChildSubjects = append(foreign.R.ChildSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.ID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.ChildSubjects = append(foreign.R.ChildSubjects, local)
				break
			}
		}
	}

	return nil
}

// SetSubject of the childSubject to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.ChildSubjects.
func (o *ChildSubject) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"child_subject\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, childSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.ID
	if o.R == nil {
		o.R = &childSubjectR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			ChildSubjects: ChildSubjectSlice{o},
		}
	} else {
		related.R.ChildSubjects = append(related.R.ChildSubjects, o)
	}

	return nil
}

// ChildSubjects retrieves all the records using an executor.
func ChildSubjects(mods ...qm.QueryMod) childSubjectQuery {
	mods = append(mods, qm.From("\"child_subject\""))
	return childSubjectQuery{NewQuery(mods...)}
}

// FindChildSubject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindChildSubject(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ChildSubject, error) {
	childSubjectObj := &ChildSubject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"child_subject\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, childSubjectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from child_subject")
	}

	return childSubjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ChildSubject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no child_subject provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(childSubjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	childSubjectInsertCacheMut.RLock()
	cache, cached := childSubjectInsertCache[key]
	childSubjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			childSubjectAllColumns,
			childSubjectColumnsWithDefault,
			childSubjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(childSubjectType, childSubjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(childSubjectType, childSubjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"child_subject\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"child_subject\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into child_subject")
	}

	if !cached {
		childSubjectInsertCacheMut.Lock()
		childSubjectInsertCache[key] = cache
		childSubjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ChildSubject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ChildSubject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	childSubjectUpdateCacheMut.RLock()
	cache, cached := childSubjectUpdateCache[key]
	childSubjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			childSubjectAllColumns,
			childSubjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update child_subject, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"child_subject\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, childSubjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(childSubjectType, childSubjectMapping, append(wl, childSubjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update child_subject row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for child_subject")
	}

	if !cached {
		childSubjectUpdateCacheMut.Lock()
		childSubjectUpdateCache[key] = cache
		childSubjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q childSubjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for child_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for child_subject")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ChildSubjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"child_subject\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, childSubjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in childSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all childSubject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ChildSubject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no child_subject provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(childSubjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	childSubjectUpsertCacheMut.RLock()
	cache, cached := childSubjectUpsertCache[key]
	childSubjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			childSubjectAllColumns,
			childSubjectColumnsWithDefault,
			childSubjectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			childSubjectAllColumns,
			childSubjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert child_subject, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(childSubjectPrimaryKeyColumns))
			copy(conflict, childSubjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"child_subject\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(childSubjectType, childSubjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(childSubjectType, childSubjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert child_subject")
	}

	if !cached {
		childSubjectUpsertCacheMut.Lock()
		childSubjectUpsertCache[key] = cache
		childSubjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ChildSubject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ChildSubject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ChildSubject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), childSubjectPrimaryKeyMapping)
	sql := "DELETE FROM \"child_subject\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from child_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for child_subject")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q childSubjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no childSubjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from child_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for child_subject")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ChildSubjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(childSubjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"child_subject\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, childSubjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from childSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for child_subject")
	}

	if len(childSubjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ChildSubject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindChildSubject(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ChildSubjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ChildSubjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), childSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"child_subject\".* FROM \"child_subject\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, childSubjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ChildSubjectSlice")
	}

	*o = slice

	return nil
}

// ChildSubjectExists checks if the ChildSubject row exists.
func ChildSubjectExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"child_subject\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if child_subject exists")
	}

	return exists, nil
}

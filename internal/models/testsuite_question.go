// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TestsuiteQuestion is an object representing the database table.
type TestsuiteQuestion struct {
	ID          int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	TestsuiteID int   `boil:"testsuite_id" json:"testsuite_id" toml:"testsuite_id" yaml:"testsuite_id"`
	QuestionID  int   `boil:"question_id" json:"question_id" toml:"question_id" yaml:"question_id"`

	R *testsuiteQuestionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L testsuiteQuestionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TestsuiteQuestionColumns = struct {
	ID          string
	TestsuiteID string
	QuestionID  string
}{
	ID:          "id",
	TestsuiteID: "testsuite_id",
	QuestionID:  "question_id",
}

// Generated where

var TestsuiteQuestionWhere = struct {
	ID          whereHelperint64
	TestsuiteID whereHelperint
	QuestionID  whereHelperint
}{
	ID:          whereHelperint64{field: "\"testsuite_question\".\"id\""},
	TestsuiteID: whereHelperint{field: "\"testsuite_question\".\"testsuite_id\""},
	QuestionID:  whereHelperint{field: "\"testsuite_question\".\"question_id\""},
}

// TestsuiteQuestionRels is where relationship names are stored.
var TestsuiteQuestionRels = struct {
	Question  string
	Testsuite string
}{
	Question:  "Question",
	Testsuite: "Testsuite",
}

// testsuiteQuestionR is where relationships are stored.
type testsuiteQuestionR struct {
	Question  *Question
	Testsuite *Testsuite
}

// NewStruct creates a new relationship struct
func (*testsuiteQuestionR) NewStruct() *testsuiteQuestionR {
	return &testsuiteQuestionR{}
}

// testsuiteQuestionL is where Load methods for each relationship are stored.
type testsuiteQuestionL struct{}

var (
	testsuiteQuestionAllColumns            = []string{"id", "testsuite_id", "question_id"}
	testsuiteQuestionColumnsWithoutDefault = []string{"testsuite_id", "question_id"}
	testsuiteQuestionColumnsWithDefault    = []string{"id"}
	testsuiteQuestionPrimaryKeyColumns     = []string{"id"}
)

type (
	// TestsuiteQuestionSlice is an alias for a slice of pointers to TestsuiteQuestion.
	// This should generally be used opposed to []TestsuiteQuestion.
	TestsuiteQuestionSlice []*TestsuiteQuestion
	// TestsuiteQuestionHook is the signature for custom TestsuiteQuestion hook methods
	TestsuiteQuestionHook func(context.Context, boil.ContextExecutor, *TestsuiteQuestion) error

	testsuiteQuestionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	testsuiteQuestionType                 = reflect.TypeOf(&TestsuiteQuestion{})
	testsuiteQuestionMapping              = queries.MakeStructMapping(testsuiteQuestionType)
	testsuiteQuestionPrimaryKeyMapping, _ = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, testsuiteQuestionPrimaryKeyColumns)
	testsuiteQuestionInsertCacheMut       sync.RWMutex
	testsuiteQuestionInsertCache          = make(map[string]insertCache)
	testsuiteQuestionUpdateCacheMut       sync.RWMutex
	testsuiteQuestionUpdateCache          = make(map[string]updateCache)
	testsuiteQuestionUpsertCacheMut       sync.RWMutex
	testsuiteQuestionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var testsuiteQuestionBeforeInsertHooks []TestsuiteQuestionHook
var testsuiteQuestionBeforeUpdateHooks []TestsuiteQuestionHook
var testsuiteQuestionBeforeDeleteHooks []TestsuiteQuestionHook
var testsuiteQuestionBeforeUpsertHooks []TestsuiteQuestionHook

var testsuiteQuestionAfterInsertHooks []TestsuiteQuestionHook
var testsuiteQuestionAfterSelectHooks []TestsuiteQuestionHook
var testsuiteQuestionAfterUpdateHooks []TestsuiteQuestionHook
var testsuiteQuestionAfterDeleteHooks []TestsuiteQuestionHook
var testsuiteQuestionAfterUpsertHooks []TestsuiteQuestionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TestsuiteQuestion) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TestsuiteQuestion) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TestsuiteQuestion) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TestsuiteQuestion) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TestsuiteQuestion) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TestsuiteQuestion) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TestsuiteQuestion) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TestsuiteQuestion) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TestsuiteQuestion) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range testsuiteQuestionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTestsuiteQuestionHook registers your hook function for all future operations.
func AddTestsuiteQuestionHook(hookPoint boil.HookPoint, testsuiteQuestionHook TestsuiteQuestionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		testsuiteQuestionBeforeInsertHooks = append(testsuiteQuestionBeforeInsertHooks, testsuiteQuestionHook)
	case boil.BeforeUpdateHook:
		testsuiteQuestionBeforeUpdateHooks = append(testsuiteQuestionBeforeUpdateHooks, testsuiteQuestionHook)
	case boil.BeforeDeleteHook:
		testsuiteQuestionBeforeDeleteHooks = append(testsuiteQuestionBeforeDeleteHooks, testsuiteQuestionHook)
	case boil.BeforeUpsertHook:
		testsuiteQuestionBeforeUpsertHooks = append(testsuiteQuestionBeforeUpsertHooks, testsuiteQuestionHook)
	case boil.AfterInsertHook:
		testsuiteQuestionAfterInsertHooks = append(testsuiteQuestionAfterInsertHooks, testsuiteQuestionHook)
	case boil.AfterSelectHook:
		testsuiteQuestionAfterSelectHooks = append(testsuiteQuestionAfterSelectHooks, testsuiteQuestionHook)
	case boil.AfterUpdateHook:
		testsuiteQuestionAfterUpdateHooks = append(testsuiteQuestionAfterUpdateHooks, testsuiteQuestionHook)
	case boil.AfterDeleteHook:
		testsuiteQuestionAfterDeleteHooks = append(testsuiteQuestionAfterDeleteHooks, testsuiteQuestionHook)
	case boil.AfterUpsertHook:
		testsuiteQuestionAfterUpsertHooks = append(testsuiteQuestionAfterUpsertHooks, testsuiteQuestionHook)
	}
}

// One returns a single testsuiteQuestion record from the query.
func (q testsuiteQuestionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TestsuiteQuestion, error) {
	o := &TestsuiteQuestion{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for testsuite_question")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TestsuiteQuestion records from the query.
func (q testsuiteQuestionQuery) All(ctx context.Context, exec boil.ContextExecutor) (TestsuiteQuestionSlice, error) {
	var o []*TestsuiteQuestion

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TestsuiteQuestion slice")
	}

	if len(testsuiteQuestionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TestsuiteQuestion records in the query.
func (q testsuiteQuestionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count testsuite_question rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q testsuiteQuestionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if testsuite_question exists")
	}

	return count > 0, nil
}

// Question pointed to by the foreign key.
func (o *TestsuiteQuestion) Question(mods ...qm.QueryMod) questionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.QuestionID),
	}

	queryMods = append(queryMods, mods...)

	query := Questions(queryMods...)
	queries.SetFrom(query.Query, "\"question\"")

	return query
}

// Testsuite pointed to by the foreign key.
func (o *TestsuiteQuestion) Testsuite(mods ...qm.QueryMod) testsuiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TestsuiteID),
	}

	queryMods = append(queryMods, mods...)

	query := Testsuites(queryMods...)
	queries.SetFrom(query.Query, "\"testsuite\"")

	return query
}

// LoadQuestion allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (testsuiteQuestionL) LoadQuestion(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestsuiteQuestion interface{}, mods queries.Applicator) error {
	var slice []*TestsuiteQuestion
	var object *TestsuiteQuestion

	if singular {
		object = maybeTestsuiteQuestion.(*TestsuiteQuestion)
	} else {
		slice = *maybeTestsuiteQuestion.(*[]*TestsuiteQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testsuiteQuestionR{}
		}
		args = append(args, object.QuestionID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testsuiteQuestionR{}
			}

			for _, a := range args {
				if a == obj.QuestionID {
					continue Outer
				}
			}

			args = append(args, obj.QuestionID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`question`), qm.WhereIn(`question.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Question")
	}

	var resultSlice []*Question
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Question")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for question")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for question")
	}

	if len(testsuiteQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Question = foreign
		if foreign.R == nil {
			foreign.R = &questionR{}
		}
		foreign.R.TestsuiteQuestions = append(foreign.R.TestsuiteQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.QuestionID == foreign.ID {
				local.R.Question = foreign
				if foreign.R == nil {
					foreign.R = &questionR{}
				}
				foreign.R.TestsuiteQuestions = append(foreign.R.TestsuiteQuestions, local)
				break
			}
		}
	}

	return nil
}

// LoadTestsuite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (testsuiteQuestionL) LoadTestsuite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTestsuiteQuestion interface{}, mods queries.Applicator) error {
	var slice []*TestsuiteQuestion
	var object *TestsuiteQuestion

	if singular {
		object = maybeTestsuiteQuestion.(*TestsuiteQuestion)
	} else {
		slice = *maybeTestsuiteQuestion.(*[]*TestsuiteQuestion)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &testsuiteQuestionR{}
		}
		args = append(args, object.TestsuiteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &testsuiteQuestionR{}
			}

			for _, a := range args {
				if a == obj.TestsuiteID {
					continue Outer
				}
			}

			args = append(args, obj.TestsuiteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`testsuite`), qm.WhereIn(`testsuite.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Testsuite")
	}

	var resultSlice []*Testsuite
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Testsuite")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for testsuite")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for testsuite")
	}

	if len(testsuiteQuestionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Testsuite = foreign
		if foreign.R == nil {
			foreign.R = &testsuiteR{}
		}
		foreign.R.TestsuiteQuestions = append(foreign.R.TestsuiteQuestions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TestsuiteID == foreign.ID {
				local.R.Testsuite = foreign
				if foreign.R == nil {
					foreign.R = &testsuiteR{}
				}
				foreign.R.TestsuiteQuestions = append(foreign.R.TestsuiteQuestions, local)
				break
			}
		}
	}

	return nil
}

// SetQuestion of the testsuiteQuestion to the related item.
// Sets o.R.Question to related.
// Adds o to related.R.TestsuiteQuestions.
func (o *TestsuiteQuestion) SetQuestion(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Question) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"testsuite_question\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"question_id"}),
		strmangle.WhereClause("\"", "\"", 2, testsuiteQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.QuestionID = related.ID
	if o.R == nil {
		o.R = &testsuiteQuestionR{
			Question: related,
		}
	} else {
		o.R.Question = related
	}

	if related.R == nil {
		related.R = &questionR{
			TestsuiteQuestions: TestsuiteQuestionSlice{o},
		}
	} else {
		related.R.TestsuiteQuestions = append(related.R.TestsuiteQuestions, o)
	}

	return nil
}

// SetTestsuite of the testsuiteQuestion to the related item.
// Sets o.R.Testsuite to related.
// Adds o to related.R.TestsuiteQuestions.
func (o *TestsuiteQuestion) SetTestsuite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Testsuite) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"testsuite_question\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"testsuite_id"}),
		strmangle.WhereClause("\"", "\"", 2, testsuiteQuestionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TestsuiteID = related.ID
	if o.R == nil {
		o.R = &testsuiteQuestionR{
			Testsuite: related,
		}
	} else {
		o.R.Testsuite = related
	}

	if related.R == nil {
		related.R = &testsuiteR{
			TestsuiteQuestions: TestsuiteQuestionSlice{o},
		}
	} else {
		related.R.TestsuiteQuestions = append(related.R.TestsuiteQuestions, o)
	}

	return nil
}

// TestsuiteQuestions retrieves all the records using an executor.
func TestsuiteQuestions(mods ...qm.QueryMod) testsuiteQuestionQuery {
	mods = append(mods, qm.From("\"testsuite_question\""))
	return testsuiteQuestionQuery{NewQuery(mods...)}
}

// FindTestsuiteQuestion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTestsuiteQuestion(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TestsuiteQuestion, error) {
	testsuiteQuestionObj := &TestsuiteQuestion{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"testsuite_question\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, testsuiteQuestionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from testsuite_question")
	}

	return testsuiteQuestionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TestsuiteQuestion) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no testsuite_question provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testsuiteQuestionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	testsuiteQuestionInsertCacheMut.RLock()
	cache, cached := testsuiteQuestionInsertCache[key]
	testsuiteQuestionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			testsuiteQuestionAllColumns,
			testsuiteQuestionColumnsWithDefault,
			testsuiteQuestionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"testsuite_question\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"testsuite_question\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into testsuite_question")
	}

	if !cached {
		testsuiteQuestionInsertCacheMut.Lock()
		testsuiteQuestionInsertCache[key] = cache
		testsuiteQuestionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TestsuiteQuestion.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TestsuiteQuestion) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	testsuiteQuestionUpdateCacheMut.RLock()
	cache, cached := testsuiteQuestionUpdateCache[key]
	testsuiteQuestionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			testsuiteQuestionAllColumns,
			testsuiteQuestionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update testsuite_question, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"testsuite_question\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, testsuiteQuestionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, append(wl, testsuiteQuestionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update testsuite_question row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for testsuite_question")
	}

	if !cached {
		testsuiteQuestionUpdateCacheMut.Lock()
		testsuiteQuestionUpdateCache[key] = cache
		testsuiteQuestionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q testsuiteQuestionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for testsuite_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for testsuite_question")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TestsuiteQuestionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuiteQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"testsuite_question\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, testsuiteQuestionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in testsuiteQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all testsuiteQuestion")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TestsuiteQuestion) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no testsuite_question provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(testsuiteQuestionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	testsuiteQuestionUpsertCacheMut.RLock()
	cache, cached := testsuiteQuestionUpsertCache[key]
	testsuiteQuestionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			testsuiteQuestionAllColumns,
			testsuiteQuestionColumnsWithDefault,
			testsuiteQuestionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			testsuiteQuestionAllColumns,
			testsuiteQuestionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert testsuite_question, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(testsuiteQuestionPrimaryKeyColumns))
			copy(conflict, testsuiteQuestionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"testsuite_question\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(testsuiteQuestionType, testsuiteQuestionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert testsuite_question")
	}

	if !cached {
		testsuiteQuestionUpsertCacheMut.Lock()
		testsuiteQuestionUpsertCache[key] = cache
		testsuiteQuestionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TestsuiteQuestion record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TestsuiteQuestion) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TestsuiteQuestion provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), testsuiteQuestionPrimaryKeyMapping)
	sql := "DELETE FROM \"testsuite_question\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from testsuite_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for testsuite_question")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q testsuiteQuestionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no testsuiteQuestionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testsuite_question")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for testsuite_question")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TestsuiteQuestionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(testsuiteQuestionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuiteQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"testsuite_question\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testsuiteQuestionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from testsuiteQuestion slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for testsuite_question")
	}

	if len(testsuiteQuestionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TestsuiteQuestion) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTestsuiteQuestion(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TestsuiteQuestionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TestsuiteQuestionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), testsuiteQuestionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"testsuite_question\".* FROM \"testsuite_question\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, testsuiteQuestionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TestsuiteQuestionSlice")
	}

	*o = slice

	return nil
}

// TestsuiteQuestionExists checks if the TestsuiteQuestion row exists.
func TestsuiteQuestionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"testsuite_question\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if testsuite_question exists")
	}

	return exists, nil
}

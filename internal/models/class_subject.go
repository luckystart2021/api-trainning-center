// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// ClassSubject is an object representing the database table.
type ClassSubject struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	SubjectID int       `boil:"subject_id" json:"subject_id" toml:"subject_id" yaml:"subject_id"`
	CourseID  int       `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	StudyDate null.Time `boil:"study_date" json:"study_date,omitempty" toml:"study_date" yaml:"study_date,omitempty"`
	CreatedAt null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *classSubjectR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L classSubjectL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClassSubjectColumns = struct {
	ID        string
	SubjectID string
	CourseID  string
	StudyDate string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	SubjectID: "subject_id",
	CourseID:  "course_id",
	StudyDate: "study_date",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClassSubjectWhere = struct {
	ID        whereHelperint64
	SubjectID whereHelperint
	CourseID  whereHelperint
	StudyDate whereHelpernull_Time
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
}{
	ID:        whereHelperint64{field: "\"class_subject\".\"id\""},
	SubjectID: whereHelperint{field: "\"class_subject\".\"subject_id\""},
	CourseID:  whereHelperint{field: "\"class_subject\".\"course_id\""},
	StudyDate: whereHelpernull_Time{field: "\"class_subject\".\"study_date\""},
	CreatedAt: whereHelpernull_Time{field: "\"class_subject\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"class_subject\".\"updated_at\""},
}

// ClassSubjectRels is where relationship names are stored.
var ClassSubjectRels = struct {
	Subject string
	Course  string
}{
	Subject: "Subject",
	Course:  "Course",
}

// classSubjectR is where relationships are stored.
type classSubjectR struct {
	Subject *Subject
	Course  *Course
}

// NewStruct creates a new relationship struct
func (*classSubjectR) NewStruct() *classSubjectR {
	return &classSubjectR{}
}

// classSubjectL is where Load methods for each relationship are stored.
type classSubjectL struct{}

var (
	classSubjectAllColumns            = []string{"id", "subject_id", "course_id", "study_date", "created_at", "updated_at"}
	classSubjectColumnsWithoutDefault = []string{"subject_id", "course_id", "study_date", "created_at", "updated_at"}
	classSubjectColumnsWithDefault    = []string{"id"}
	classSubjectPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClassSubjectSlice is an alias for a slice of pointers to ClassSubject.
	// This should generally be used opposed to []ClassSubject.
	ClassSubjectSlice []*ClassSubject
	// ClassSubjectHook is the signature for custom ClassSubject hook methods
	ClassSubjectHook func(context.Context, boil.ContextExecutor, *ClassSubject) error

	classSubjectQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	classSubjectType                 = reflect.TypeOf(&ClassSubject{})
	classSubjectMapping              = queries.MakeStructMapping(classSubjectType)
	classSubjectPrimaryKeyMapping, _ = queries.BindMapping(classSubjectType, classSubjectMapping, classSubjectPrimaryKeyColumns)
	classSubjectInsertCacheMut       sync.RWMutex
	classSubjectInsertCache          = make(map[string]insertCache)
	classSubjectUpdateCacheMut       sync.RWMutex
	classSubjectUpdateCache          = make(map[string]updateCache)
	classSubjectUpsertCacheMut       sync.RWMutex
	classSubjectUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var classSubjectBeforeInsertHooks []ClassSubjectHook
var classSubjectBeforeUpdateHooks []ClassSubjectHook
var classSubjectBeforeDeleteHooks []ClassSubjectHook
var classSubjectBeforeUpsertHooks []ClassSubjectHook

var classSubjectAfterInsertHooks []ClassSubjectHook
var classSubjectAfterSelectHooks []ClassSubjectHook
var classSubjectAfterUpdateHooks []ClassSubjectHook
var classSubjectAfterDeleteHooks []ClassSubjectHook
var classSubjectAfterUpsertHooks []ClassSubjectHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClassSubject) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClassSubject) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClassSubject) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClassSubject) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClassSubject) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClassSubject) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClassSubject) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClassSubject) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClassSubject) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range classSubjectAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClassSubjectHook registers your hook function for all future operations.
func AddClassSubjectHook(hookPoint boil.HookPoint, classSubjectHook ClassSubjectHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		classSubjectBeforeInsertHooks = append(classSubjectBeforeInsertHooks, classSubjectHook)
	case boil.BeforeUpdateHook:
		classSubjectBeforeUpdateHooks = append(classSubjectBeforeUpdateHooks, classSubjectHook)
	case boil.BeforeDeleteHook:
		classSubjectBeforeDeleteHooks = append(classSubjectBeforeDeleteHooks, classSubjectHook)
	case boil.BeforeUpsertHook:
		classSubjectBeforeUpsertHooks = append(classSubjectBeforeUpsertHooks, classSubjectHook)
	case boil.AfterInsertHook:
		classSubjectAfterInsertHooks = append(classSubjectAfterInsertHooks, classSubjectHook)
	case boil.AfterSelectHook:
		classSubjectAfterSelectHooks = append(classSubjectAfterSelectHooks, classSubjectHook)
	case boil.AfterUpdateHook:
		classSubjectAfterUpdateHooks = append(classSubjectAfterUpdateHooks, classSubjectHook)
	case boil.AfterDeleteHook:
		classSubjectAfterDeleteHooks = append(classSubjectAfterDeleteHooks, classSubjectHook)
	case boil.AfterUpsertHook:
		classSubjectAfterUpsertHooks = append(classSubjectAfterUpsertHooks, classSubjectHook)
	}
}

// One returns a single classSubject record from the query.
func (q classSubjectQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClassSubject, error) {
	o := &ClassSubject{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for class_subject")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClassSubject records from the query.
func (q classSubjectQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClassSubjectSlice, error) {
	var o []*ClassSubject

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClassSubject slice")
	}

	if len(classSubjectAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClassSubject records in the query.
func (q classSubjectQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count class_subject rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q classSubjectQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if class_subject exists")
	}

	return count > 0, nil
}

// Subject pointed to by the foreign key.
func (o *ClassSubject) Subject(mods ...qm.QueryMod) subjectQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SubjectID),
	}

	queryMods = append(queryMods, mods...)

	query := Subjects(queryMods...)
	queries.SetFrom(query.Query, "\"subject\"")

	return query
}

// Course pointed to by the foreign key.
func (o *ClassSubject) Course(mods ...qm.QueryMod) courseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CourseID),
	}

	queryMods = append(queryMods, mods...)

	query := Courses(queryMods...)
	queries.SetFrom(query.Query, "\"course\"")

	return query
}

// LoadSubject allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (classSubjectL) LoadSubject(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClassSubject interface{}, mods queries.Applicator) error {
	var slice []*ClassSubject
	var object *ClassSubject

	if singular {
		object = maybeClassSubject.(*ClassSubject)
	} else {
		slice = *maybeClassSubject.(*[]*ClassSubject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classSubjectR{}
		}
		args = append(args, object.SubjectID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classSubjectR{}
			}

			for _, a := range args {
				if a == obj.SubjectID {
					continue Outer
				}
			}

			args = append(args, obj.SubjectID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`subject`), qm.WhereIn(`subject.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Subject")
	}

	var resultSlice []*Subject
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Subject")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for subject")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for subject")
	}

	if len(classSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Subject = foreign
		if foreign.R == nil {
			foreign.R = &subjectR{}
		}
		foreign.R.ClassSubjects = append(foreign.R.ClassSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SubjectID == foreign.ID {
				local.R.Subject = foreign
				if foreign.R == nil {
					foreign.R = &subjectR{}
				}
				foreign.R.ClassSubjects = append(foreign.R.ClassSubjects, local)
				break
			}
		}
	}

	return nil
}

// LoadCourse allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (classSubjectL) LoadCourse(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClassSubject interface{}, mods queries.Applicator) error {
	var slice []*ClassSubject
	var object *ClassSubject

	if singular {
		object = maybeClassSubject.(*ClassSubject)
	} else {
		slice = *maybeClassSubject.(*[]*ClassSubject)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &classSubjectR{}
		}
		args = append(args, object.CourseID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &classSubjectR{}
			}

			for _, a := range args {
				if a == obj.CourseID {
					continue Outer
				}
			}

			args = append(args, obj.CourseID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`course`), qm.WhereIn(`course.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Course")
	}

	var resultSlice []*Course
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Course")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for course")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for course")
	}

	if len(classSubjectAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Course = foreign
		if foreign.R == nil {
			foreign.R = &courseR{}
		}
		foreign.R.ClassSubjects = append(foreign.R.ClassSubjects, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourseID == foreign.ID {
				local.R.Course = foreign
				if foreign.R == nil {
					foreign.R = &courseR{}
				}
				foreign.R.ClassSubjects = append(foreign.R.ClassSubjects, local)
				break
			}
		}
	}

	return nil
}

// SetSubject of the classSubject to the related item.
// Sets o.R.Subject to related.
// Adds o to related.R.ClassSubjects.
func (o *ClassSubject) SetSubject(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Subject) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"class_subject\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"subject_id"}),
		strmangle.WhereClause("\"", "\"", 2, classSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SubjectID = related.ID
	if o.R == nil {
		o.R = &classSubjectR{
			Subject: related,
		}
	} else {
		o.R.Subject = related
	}

	if related.R == nil {
		related.R = &subjectR{
			ClassSubjects: ClassSubjectSlice{o},
		}
	} else {
		related.R.ClassSubjects = append(related.R.ClassSubjects, o)
	}

	return nil
}

// SetCourse of the classSubject to the related item.
// Sets o.R.Course to related.
// Adds o to related.R.ClassSubjects.
func (o *ClassSubject) SetCourse(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Course) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"class_subject\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"course_id"}),
		strmangle.WhereClause("\"", "\"", 2, classSubjectPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourseID = related.ID
	if o.R == nil {
		o.R = &classSubjectR{
			Course: related,
		}
	} else {
		o.R.Course = related
	}

	if related.R == nil {
		related.R = &courseR{
			ClassSubjects: ClassSubjectSlice{o},
		}
	} else {
		related.R.ClassSubjects = append(related.R.ClassSubjects, o)
	}

	return nil
}

// ClassSubjects retrieves all the records using an executor.
func ClassSubjects(mods ...qm.QueryMod) classSubjectQuery {
	mods = append(mods, qm.From("\"class_subject\""))
	return classSubjectQuery{NewQuery(mods...)}
}

// FindClassSubject retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClassSubject(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*ClassSubject, error) {
	classSubjectObj := &ClassSubject{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"class_subject\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, classSubjectObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from class_subject")
	}

	return classSubjectObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClassSubject) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no class_subject provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classSubjectColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	classSubjectInsertCacheMut.RLock()
	cache, cached := classSubjectInsertCache[key]
	classSubjectInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			classSubjectAllColumns,
			classSubjectColumnsWithDefault,
			classSubjectColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(classSubjectType, classSubjectMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(classSubjectType, classSubjectMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"class_subject\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"class_subject\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into class_subject")
	}

	if !cached {
		classSubjectInsertCacheMut.Lock()
		classSubjectInsertCache[key] = cache
		classSubjectInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClassSubject.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClassSubject) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	classSubjectUpdateCacheMut.RLock()
	cache, cached := classSubjectUpdateCache[key]
	classSubjectUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			classSubjectAllColumns,
			classSubjectPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update class_subject, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"class_subject\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, classSubjectPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(classSubjectType, classSubjectMapping, append(wl, classSubjectPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update class_subject row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for class_subject")
	}

	if !cached {
		classSubjectUpdateCacheMut.Lock()
		classSubjectUpdateCache[key] = cache
		classSubjectUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q classSubjectQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for class_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for class_subject")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClassSubjectSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"class_subject\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, classSubjectPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in classSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all classSubject")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClassSubject) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no class_subject provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(classSubjectColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	classSubjectUpsertCacheMut.RLock()
	cache, cached := classSubjectUpsertCache[key]
	classSubjectUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			classSubjectAllColumns,
			classSubjectColumnsWithDefault,
			classSubjectColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			classSubjectAllColumns,
			classSubjectPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert class_subject, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(classSubjectPrimaryKeyColumns))
			copy(conflict, classSubjectPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"class_subject\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(classSubjectType, classSubjectMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(classSubjectType, classSubjectMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert class_subject")
	}

	if !cached {
		classSubjectUpsertCacheMut.Lock()
		classSubjectUpsertCache[key] = cache
		classSubjectUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClassSubject record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClassSubject) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClassSubject provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), classSubjectPrimaryKeyMapping)
	sql := "DELETE FROM \"class_subject\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from class_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for class_subject")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q classSubjectQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no classSubjectQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from class_subject")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for class_subject")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClassSubjectSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(classSubjectBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"class_subject\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classSubjectPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from classSubject slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for class_subject")
	}

	if len(classSubjectAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClassSubject) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClassSubject(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClassSubjectSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClassSubjectSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), classSubjectPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"class_subject\".* FROM \"class_subject\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, classSubjectPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClassSubjectSlice")
	}

	*o = slice

	return nil
}

// ClassSubjectExists checks if the ClassSubject row exists.
func ClassSubjectExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"class_subject\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if class_subject exists")
	}

	return exists, nil
}

// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Schedule is an object representing the database table.
type Schedule struct {
	ID          int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatedBy   string    `boil:"created_by" json:"created_by" toml:"created_by" yaml:"created_by"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UpdatedBy   string    `boil:"updated_by" json:"updated_by" toml:"updated_by" yaml:"updated_by"`
	CourseID    int64     `boil:"course_id" json:"course_id" toml:"course_id" yaml:"course_id"`
	SubjectName string    `boil:"subject_name" json:"subject_name" toml:"subject_name" yaml:"subject_name"`
	TeacherName string    `boil:"teacher_name" json:"teacher_name" toml:"teacher_name" yaml:"teacher_name"`
	Time        int       `boil:"time" json:"time" toml:"time" yaml:"time"`

	R *scheduleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L scheduleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ScheduleColumns = struct {
	ID          string
	CreatedAt   string
	CreatedBy   string
	UpdatedAt   string
	UpdatedBy   string
	CourseID    string
	SubjectName string
	TeacherName string
	Time        string
}{
	ID:          "id",
	CreatedAt:   "created_at",
	CreatedBy:   "created_by",
	UpdatedAt:   "updated_at",
	UpdatedBy:   "updated_by",
	CourseID:    "course_id",
	SubjectName: "subject_name",
	TeacherName: "teacher_name",
	Time:        "time",
}

// Generated where

var ScheduleWhere = struct {
	ID          whereHelperint64
	CreatedAt   whereHelpertime_Time
	CreatedBy   whereHelperstring
	UpdatedAt   whereHelpertime_Time
	UpdatedBy   whereHelperstring
	CourseID    whereHelperint64
	SubjectName whereHelperstring
	TeacherName whereHelperstring
	Time        whereHelperint
}{
	ID:          whereHelperint64{field: "\"schedule\".\"id\""},
	CreatedAt:   whereHelpertime_Time{field: "\"schedule\".\"created_at\""},
	CreatedBy:   whereHelperstring{field: "\"schedule\".\"created_by\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"schedule\".\"updated_at\""},
	UpdatedBy:   whereHelperstring{field: "\"schedule\".\"updated_by\""},
	CourseID:    whereHelperint64{field: "\"schedule\".\"course_id\""},
	SubjectName: whereHelperstring{field: "\"schedule\".\"subject_name\""},
	TeacherName: whereHelperstring{field: "\"schedule\".\"teacher_name\""},
	Time:        whereHelperint{field: "\"schedule\".\"time\""},
}

// ScheduleRels is where relationship names are stored.
var ScheduleRels = struct {
	ScheduleContents string
}{
	ScheduleContents: "ScheduleContents",
}

// scheduleR is where relationships are stored.
type scheduleR struct {
	ScheduleContents ScheduleContentSlice
}

// NewStruct creates a new relationship struct
func (*scheduleR) NewStruct() *scheduleR {
	return &scheduleR{}
}

// scheduleL is where Load methods for each relationship are stored.
type scheduleL struct{}

var (
	scheduleAllColumns            = []string{"id", "created_at", "created_by", "updated_at", "updated_by", "course_id", "subject_name", "teacher_name", "time"}
	scheduleColumnsWithoutDefault = []string{"created_by", "updated_by", "course_id", "subject_name", "teacher_name", "time"}
	scheduleColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	schedulePrimaryKeyColumns     = []string{"id"}
)

type (
	// ScheduleSlice is an alias for a slice of pointers to Schedule.
	// This should generally be used opposed to []Schedule.
	ScheduleSlice []*Schedule
	// ScheduleHook is the signature for custom Schedule hook methods
	ScheduleHook func(context.Context, boil.ContextExecutor, *Schedule) error

	scheduleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	scheduleType                 = reflect.TypeOf(&Schedule{})
	scheduleMapping              = queries.MakeStructMapping(scheduleType)
	schedulePrimaryKeyMapping, _ = queries.BindMapping(scheduleType, scheduleMapping, schedulePrimaryKeyColumns)
	scheduleInsertCacheMut       sync.RWMutex
	scheduleInsertCache          = make(map[string]insertCache)
	scheduleUpdateCacheMut       sync.RWMutex
	scheduleUpdateCache          = make(map[string]updateCache)
	scheduleUpsertCacheMut       sync.RWMutex
	scheduleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var scheduleBeforeInsertHooks []ScheduleHook
var scheduleBeforeUpdateHooks []ScheduleHook
var scheduleBeforeDeleteHooks []ScheduleHook
var scheduleBeforeUpsertHooks []ScheduleHook

var scheduleAfterInsertHooks []ScheduleHook
var scheduleAfterSelectHooks []ScheduleHook
var scheduleAfterUpdateHooks []ScheduleHook
var scheduleAfterDeleteHooks []ScheduleHook
var scheduleAfterUpsertHooks []ScheduleHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Schedule) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Schedule) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Schedule) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Schedule) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Schedule) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Schedule) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Schedule) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Schedule) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Schedule) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range scheduleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddScheduleHook registers your hook function for all future operations.
func AddScheduleHook(hookPoint boil.HookPoint, scheduleHook ScheduleHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		scheduleBeforeInsertHooks = append(scheduleBeforeInsertHooks, scheduleHook)
	case boil.BeforeUpdateHook:
		scheduleBeforeUpdateHooks = append(scheduleBeforeUpdateHooks, scheduleHook)
	case boil.BeforeDeleteHook:
		scheduleBeforeDeleteHooks = append(scheduleBeforeDeleteHooks, scheduleHook)
	case boil.BeforeUpsertHook:
		scheduleBeforeUpsertHooks = append(scheduleBeforeUpsertHooks, scheduleHook)
	case boil.AfterInsertHook:
		scheduleAfterInsertHooks = append(scheduleAfterInsertHooks, scheduleHook)
	case boil.AfterSelectHook:
		scheduleAfterSelectHooks = append(scheduleAfterSelectHooks, scheduleHook)
	case boil.AfterUpdateHook:
		scheduleAfterUpdateHooks = append(scheduleAfterUpdateHooks, scheduleHook)
	case boil.AfterDeleteHook:
		scheduleAfterDeleteHooks = append(scheduleAfterDeleteHooks, scheduleHook)
	case boil.AfterUpsertHook:
		scheduleAfterUpsertHooks = append(scheduleAfterUpsertHooks, scheduleHook)
	}
}

// One returns a single schedule record from the query.
func (q scheduleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Schedule, error) {
	o := &Schedule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for schedule")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Schedule records from the query.
func (q scheduleQuery) All(ctx context.Context, exec boil.ContextExecutor) (ScheduleSlice, error) {
	var o []*Schedule

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Schedule slice")
	}

	if len(scheduleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Schedule records in the query.
func (q scheduleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count schedule rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q scheduleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if schedule exists")
	}

	return count > 0, nil
}

// ScheduleContents retrieves all the schedule_content's ScheduleContents with an executor.
func (o *Schedule) ScheduleContents(mods ...qm.QueryMod) scheduleContentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"schedule_content\".\"schedule_id\"=?", o.ID),
	)

	query := ScheduleContents(queryMods...)
	queries.SetFrom(query.Query, "\"schedule_content\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"schedule_content\".*"})
	}

	return query
}

// LoadScheduleContents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (scheduleL) LoadScheduleContents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSchedule interface{}, mods queries.Applicator) error {
	var slice []*Schedule
	var object *Schedule

	if singular {
		object = maybeSchedule.(*Schedule)
	} else {
		slice = *maybeSchedule.(*[]*Schedule)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &scheduleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &scheduleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`schedule_content`), qm.WhereIn(`schedule_content.schedule_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load schedule_content")
	}

	var resultSlice []*ScheduleContent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice schedule_content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on schedule_content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for schedule_content")
	}

	if len(scheduleContentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ScheduleContents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &scheduleContentR{}
			}
			foreign.R.Schedule = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ScheduleID) {
				local.R.ScheduleContents = append(local.R.ScheduleContents, foreign)
				if foreign.R == nil {
					foreign.R = &scheduleContentR{}
				}
				foreign.R.Schedule = local
				break
			}
		}
	}

	return nil
}

// AddScheduleContents adds the given related objects to the existing relationships
// of the schedule, optionally inserting them as new records.
// Appends related to o.R.ScheduleContents.
// Sets related.R.Schedule appropriately.
func (o *Schedule) AddScheduleContents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ScheduleContent) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ScheduleID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"schedule_content\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"schedule_id"}),
				strmangle.WhereClause("\"", "\"", 2, scheduleContentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ScheduleID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &scheduleR{
			ScheduleContents: related,
		}
	} else {
		o.R.ScheduleContents = append(o.R.ScheduleContents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &scheduleContentR{
				Schedule: o,
			}
		} else {
			rel.R.Schedule = o
		}
	}
	return nil
}

// SetScheduleContents removes all previously related items of the
// schedule replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Schedule's ScheduleContents accordingly.
// Replaces o.R.ScheduleContents with related.
// Sets related.R.Schedule's ScheduleContents accordingly.
func (o *Schedule) SetScheduleContents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ScheduleContent) error {
	query := "update \"schedule_content\" set \"schedule_id\" = null where \"schedule_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ScheduleContents {
			queries.SetScanner(&rel.ScheduleID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Schedule = nil
		}

		o.R.ScheduleContents = nil
	}
	return o.AddScheduleContents(ctx, exec, insert, related...)
}

// RemoveScheduleContents relationships from objects passed in.
// Removes related items from R.ScheduleContents (uses pointer comparison, removal does not keep order)
// Sets related.R.Schedule.
func (o *Schedule) RemoveScheduleContents(ctx context.Context, exec boil.ContextExecutor, related ...*ScheduleContent) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ScheduleID, nil)
		if rel.R != nil {
			rel.R.Schedule = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("schedule_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ScheduleContents {
			if rel != ri {
				continue
			}

			ln := len(o.R.ScheduleContents)
			if ln > 1 && i < ln-1 {
				o.R.ScheduleContents[i] = o.R.ScheduleContents[ln-1]
			}
			o.R.ScheduleContents = o.R.ScheduleContents[:ln-1]
			break
		}
	}

	return nil
}

// Schedules retrieves all the records using an executor.
func Schedules(mods ...qm.QueryMod) scheduleQuery {
	mods = append(mods, qm.From("\"schedule\""))
	return scheduleQuery{NewQuery(mods...)}
}

// FindSchedule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSchedule(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Schedule, error) {
	scheduleObj := &Schedule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"schedule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, scheduleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from schedule")
	}

	return scheduleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Schedule) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	scheduleInsertCacheMut.RLock()
	cache, cached := scheduleInsertCache[key]
	scheduleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			scheduleAllColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"schedule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"schedule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into schedule")
	}

	if !cached {
		scheduleInsertCacheMut.Lock()
		scheduleInsertCache[key] = cache
		scheduleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Schedule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Schedule) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	scheduleUpdateCacheMut.RLock()
	cache, cached := scheduleUpdateCache[key]
	scheduleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			scheduleAllColumns,
			schedulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update schedule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"schedule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, schedulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, append(wl, schedulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update schedule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for schedule")
	}

	if !cached {
		scheduleUpdateCacheMut.Lock()
		scheduleUpdateCache[key] = cache
		scheduleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q scheduleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for schedule")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ScheduleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"schedule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, schedulePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in schedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all schedule")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Schedule) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no schedule provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(scheduleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	scheduleUpsertCacheMut.RLock()
	cache, cached := scheduleUpsertCache[key]
	scheduleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			scheduleAllColumns,
			scheduleColumnsWithDefault,
			scheduleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			scheduleAllColumns,
			schedulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert schedule, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(schedulePrimaryKeyColumns))
			copy(conflict, schedulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"schedule\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(scheduleType, scheduleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(scheduleType, scheduleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert schedule")
	}

	if !cached {
		scheduleUpsertCacheMut.Lock()
		scheduleUpsertCache[key] = cache
		scheduleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Schedule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Schedule) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Schedule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), schedulePrimaryKeyMapping)
	sql := "DELETE FROM \"schedule\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for schedule")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q scheduleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no scheduleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ScheduleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(scheduleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schedulePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from schedule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for schedule")
	}

	if len(scheduleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Schedule) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSchedule(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ScheduleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ScheduleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), schedulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"schedule\".* FROM \"schedule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, schedulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ScheduleSlice")
	}

	*o = slice

	return nil
}

// ScheduleExists checks if the Schedule row exists.
func ScheduleExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"schedule\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if schedule exists")
	}

	return exists, nil
}
